default_platform(:ios)
import("./Certificates")

platform :ios do
  key_id = ENV['APP_STORE_CONNECT_KEY_ID']
  issuer_id = ENV['APP_STORE_CONNECT_ISSUER_ID']
  key_content = ENV['APP_STORE_CONNECT_KEY']

  lane :tests do
    run_tests(scheme: "VP VPN")
  end

  lane :tvOStests do
    run_tests(scheme: "VP VPN-tvOS")
  end

  lane :ios_e2e_tests do
    run_tests(
      scheme: "VP VPN dev",
      testplan: "VP-VPN-e2e-simulator",
      devices: ["iPhone 14"],
      prelaunch_simulator: true,
      test_without_building: true
    )
  end

  lane :tvos_e2e_tests do
    run_tests(
      scheme: "VP VPN-tvOS",
      testplan: "VP-VPN_tvOS_E2E_Tests",
      test_without_building: true,
      prelaunch_simulator: true,
      device: "Apple TV"
    )
  end

  lane :tvos_snapshot_tests do
    run_tests(
      scheme: "VP VPN-tvOS",
      testplan: "VP VPN-tvOS snapshot",
      test_without_building: true,
      prelaunch_simulator: true,
      device: "Apple TV"
    )
  end

  desc "This line is for settin up the certificates and provisioning profiles for iOS"
  lane :get_profiles do |options|
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )

    certificates
    development_profiles = options[:development] || false

    prov_name_preffix = "match AppStore"
    if development_profiles == true
      prov_name_preffix = "match Development"
    end
    get_provisioning_profile(
      development: development_profiles,
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN",
      provisioning_name: "#{prov_name_preffix} net.vp.ios.VP-VPN",
      fail_on_name_taken: true
    )

    get_provisioning_profile(
      development: development_profiles,
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN.Tunnel",
      provisioning_name: "#{prov_name_preffix} net.vp.ios.VP-VPN.Tunnel",
      fail_on_name_taken: true
    )


    get_provisioning_profile(
      development: development_profiles,
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN.WG-Tunnel",
      provisioning_name: "#{prov_name_preffix} net.vp.ios.VP-VPN.WG-Tunnel",
      fail_on_name_taken: true
    )

    get_provisioning_profile(
      development: development_profiles,
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN.VPWidget",
      provisioning_name: "#{prov_name_preffix} net.vp.ios.VP-VPN.VPWidget",
      fail_on_name_taken: true
    )

    get_provisioning_profile(
      development: development_profiles,
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN.AdBlocker",
      provisioning_name: "#{prov_name_preffix} net.vp.ios.VP-VPN.AdBlocker",
      fail_on_name_taken: true
    )

  end

  desc "This line is for setting up the certificates and provisioning profiles for tvOS"
  lane :get_tvos_profiles do

    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )

    certificates

    get_provisioning_profile(
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN",
      provisioning_name: "PIA Distribution tvOS",
      platform: "tvos",
      fail_on_name_taken: true
    )

    get_provisioning_profile(
      api_key: api_key,
      app_identifier: "net.vp.ios.VP-VPN.PacketTunnel",
      provisioning_name: "PIA Distribution tvOS PacketTunnel",
      platform: "tvos",
      fail_on_name_taken: true
    )
  end

  desc "This line is for setting up the certificates and provisioning profiles for development builds"
  lane :get_development_profiles do
    get_profiles(development: true)
  end

  desc "This line is for creating testflight build"
  lane :testflight_build do
    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )

    increment_build_number_testflight

    current_branch = git_branch()
    commit_hash = last_git_commit()
    short_hash = commit_hash[:abbreviated_commit_hash]
    archive_path = "VP_VPN_iOS_production.#{current_branch}_#{short_hash}"
    archive_zip_name = "#{archive_path}.zip"

    build_app(scheme: "VP VPN",
      export_method: "app-store",
      clean: true,
      configuration: "Release",
      build_path: "build/#{archive_path}",
      output_name: "#{archive_path}.ipa",
      export_options: {
        provisioningProfiles: { 
          "net.vp.ios.VP-VPN" => "match AppStore net.vp.ios.VP-VPN",
          "net.vp.ios.VP-VPN.Tunnel" => "match AppStore net.vp.ios.VP-VPN.Tunnel",
          "net.vp.ios.VP-VPN.WG-Tunnel" => "match AppStore net.vp.ios.VP-VPN.WG-Tunnel",
          "net.vp.ios.VP-VPN.VPWidget" => "match AppStore net.vp.ios.VP-VPN.VPWidget",
          "net.vp.ios.VP-VPN.AdBlocker" => "match AppStore net.vp.ios.VP-VPN.AdBlocker"
        }
      }
    )

    zip(output_path: archive_zip_name, path: "#{archive_path}.ipa")
    sh "mv ../#{archive_zip_name} ../artifacts/#{archive_zip_name}"

    pilot(
      api_key: api_key,
      skip_waiting_for_build_processing: true
    )

  end

  desc "Match certificates for app store"
  lane :certificates do
    import_certificates
  end

  desc "This line is for creating a developer build"
  lane :development_build do

    current_branch = git_branch()
    commit_hash = last_git_commit()
    short_hash = commit_hash[:abbreviated_commit_hash]
    archive_path = "VP_VPN_iOS.#{current_branch}_#{short_hash}"
    archive_zip_name = "#{archive_path}.zip"

    build_app(scheme: "VP VPN",
      export_method: "development",
      clean: true,
      configuration: "Debug",
      build_path: "build/#{archive_path}",
      output_name: "#{archive_path}.ipa",
      export_options: {
        provisioningProfiles: { 
          "net.vp.ios.VP-VPN" => "match Development net.vp.ios.VP-VPN",
          "net.vp.ios.VP-VPN.Tunnel" => "match Development net.vp.ios.VP-VPN.Tunnel",
          "net.vp.ios.VP-VPN.WG-Tunnel" => "match Development net.vp.ios.VP-VPN.WG-Tunnel",
          "net.vp.ios.VP-VPN.VPWidget" => "match Development net.vp.ios.VP-VPN.VPWidget",
          "net.vp.ios.VP-VPN.AdBlocker" => "match Development net.vp.ios.VP-VPN.AdBlocker"
        }
      }
    )

    zip(output_path: archive_zip_name, path: "#{archive_path}.ipa")
    sh "mv ../#{archive_zip_name} ../artifacts/#{archive_zip_name}"

  end

  desc "This line is for creating a developer build that connects with staging"
  lane :staging_build do

    current_branch = git_branch()
    commit_hash = last_git_commit()
    short_hash = commit_hash[:abbreviated_commit_hash]
    archive_path = "VP_VPN_dev_iOS.#{current_branch}_#{short_hash}"
    archive_zip_name = "#{archive_path}.zip"

    build_app(scheme: "VP VPN dev",
      export_method: "development",
      clean: true,
      configuration: "Debug",
      build_path: "build/#{archive_path}",
      output_name: "#{archive_path}.ipa",
      export_options: {
        provisioningProfiles: { 
          "net.vp.ios.VP-VPN" => "match Development net.vp.ios.VP-VPN",
          "net.vp.ios.VP-VPN.Tunnel" => "match Development net.vp.ios.VP-VPN.Tunnel",
          "net.vp.ios.VP-VPN.WG-Tunnel" => "match Development net.vp.ios.VP-VPN.WG-Tunnel",
          "net.vp.ios.VP-VPN.VPWidget" => "match Development net.vp.ios.VP-VPN.VPWidget",
          "net.vp.ios.VP-VPN.AdBlocker" => "match Development net.vp.ios.VP-VPN.AdBlocker"
        }
      }
    )

    zip(output_path: archive_zip_name, path: "#{archive_path}.ipa")
    sh "mv ../#{archive_zip_name} ../artifacts/#{archive_zip_name}"

  end


  desc "Increase build number for TestFlight"
  private_lane :increment_build_number_testflight do 
    build_number = latest_testflight_build_number(
      app_identifier: "net.vp.ios.VP-VPN"
    )
    increment_build_number(
      build_number: build_number + 1 
    )
  end
end

desc "This line is for creating testflight build for tvOS"
  lane :testflight_build_tvos do
    
    key_id = ENV['APP_STORE_CONNECT_KEY_ID']
    issuer_id = ENV['APP_STORE_CONNECT_ISSUER_ID']
    key_content = ENV['APP_STORE_CONNECT_KEY']

    api_key = app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )

    build_number = latest_testflight_build_number(
      app_identifier: "net.vp.ios.VP-VPN",
      platform: "appletvos"
    )
    increment_build_number(
      build_number: build_number + 1 
    )
    
    build_app(scheme: "VP VPN-tvOS",
      export_method: "app-store",
      xcargs: "-destination 'platform=tvOS'",
      clean: true,
      export_options: {
        provisioningProfiles: { 
          "net.vp.ios.VP-VPN" => "PIA Distribution tvOS",
          "net.vp.ios.VP-VPN.PacketTunnel" => "PIA Distribution tvOS PacketTunnel"
        }
      }
    )

    pilot(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      app_platform: "appletvos"
    )

